theory Haskabelle
imports Main Setup
begin

chapter {* Haskabelle *}

section {* Introduction *}

subsection {* What is Haskabelle? *}

text {*
  @{text Haskabelle} is a converter from @{text Haskell} source
  files to @{text "Isabelle/HOL"} \cite{isa-tutorial} theories
  implemented in @{text Haskell} itself.
*}

subsection {* The concept behind *}

text {*
  \begin{itemize}

    \item ``dumb tool'', works on Abstract Syntax Trees only.

    \item e.g.~no type inference

    \item we delegate the hard work to Isabelle

    \item Conclusion: Only because the conversion succeeded, does not
      mean that Isabelle won't choke\ldots

  \end{itemize}
*}


section {* Setup and usage *}

subsection {* Prerequisites *}

text {*
  We assume that the reader of this tutorial has some basic experience
  with @{text UNIX}, @{text Haskell}, and @{text "Isabelle/HOL"}.

  @{text Haskabelle} is shipped in source code;  this means you have
  to provide a working @{text Haskell} environment yourself,
  including some libraries.  In order to make use of the theories
  generated by @{text Haskabelle}, you will also need an
  @{text Isabelle} release.
*}

subsubsection {* @{text Haskell} environment *}

text {*
  The given version numbers just indicate which constellation has
  been tested -- others might work, too.

  First, the @{text Haskell} suite itself:

  \begin{description}

    \item[GHC] Glasgow Haskell Compiler \url{http://www.haskell.org/ghc/}
       (version 6.10.1)

  \end{description}
  
  The following libraries are required:

  \begin{description}

    \item[mtl] Monad transformer library. \\
       \url{http://hackage.haskell.org/cgi-bin/hackage-scripts/package/mtl-1.1.0.1}

    \item[xml] A simple XML library. \\
       \url{http://hackage.haskell.org/cgi-bin/hackage-scripts/package/xml-1.3.3}

    \item[uniplate] Uniform type generic traversals. \\
       \url{http://hackage.haskell.org/cgi-bin/hackage-scripts/package/uniplate-1.2.0.3}

    \item[cpphs] A liberalised re-implementation of cpp, the C pre-processor. \\
       \url{http://hackage.haskell.org/cgi-bin/hackage-scripts/package/cpphs-1.6}

    \item[Happy] Happy is a parser generator for Haskell. \\
       \url{http://hackage.haskell.org/cgi-bin/hackage-scripts/package/happy-1.18.2}

       The installation process provides a binary \shell{happy}
       which must be accessible on your \shell{PATH} to
       proceed!

    \item[haskell-src-ext] Manipulating Haskell source: abstract syntax, lexer, parser, and pretty-printer. \\
       \url{http://hackage.haskell.org/cgi-bin/hackage-scripts/package/haskell-src-exts-0.4.6}

  \end{description}
*}

subsubsection {* @{text Isabelle} release *}

text {*
  The latest @{text Isabelle} release is available from
  \url{http://isabelle.in.tum.de/download.html}.
*}

subsubsection {* @{text Haskabelle} distribution *}

text {*
  The current @{text Haskabelle} release as available from
  \url{http://isabelle.in.tum.de/haskabelle.html} is tailored
  to the latest @{text Isabelle} release.
*}


subsection {* Basic usage *}

subsubsection {* Understanding the distribution structure *}

text {*
  Throughout this manual, qualified paths
  of executables on the shell prompt are relative to the
  root directory of the @{text Haskabelle} distribution.

  Therein, among others, the following directories can be found:
*}

text %quote {*
  \begin{description}

    \item [\shell{bin/}]  Shell interfaces of @{text Haskabelle}
 
    \item [\shell{doc/}]  Documentation

    \item [\shell{default/}]  Default adaption files (see
      \secref{sec:adaption})

    \item [\shell{ex/}]  Examples (see \secref{sec:examples})

  \end{description}
*}


subsubsection {* Converting theories *}

text {*
  Haskabelle is invoked using the following command line:
*}

text %quote {*
  \shell{bin/haskabelle <SRC1> .. <SRCn> <DST>}
*}

text {*
  \noindent where \shell{<SRC1>} \ldots \shell{<SRCn>} is
  a list of @{text Haskell} source files to convert and \shell{<DST>}
  is a directory to put the generated @{text "Isabelle/HOL"} theory
  files inside.

  The @{text Prelude} theory the generated theory files depend
  on can be found in \shell{default/Prelude.thy}.
*}


subsubsection {* Compiling *}

text {*
  @{text Haskabelle} can be run directly from source;  for
  efficent use it is recommended to build a binary from
  the sources, which is accomplished by invoking
*}

text %quote {*
  \shell{bin/buildbin}
*}


section {* A bluffer's glance at Haskabelle *}

subsection {* Facilities and limits *}

text {*

  What we can:

  \begin{itemize}
\item Hs.ModuleName Resolution
\end{itemize}
~

\begin{itemize}
\item Declarations: %
\begin{itemize}
\item functions (\texttt{\small fun})
\item constants (\texttt{\small definition})
\item algebraic data types (\texttt{\small datatype})
\item classes \& instances (\texttt{\small class}, \texttt{\small instantiation})
\end{itemize}
\end{itemize}
~

\begin{itemize}
\item Linearization of declarations
\end{itemize}

\begin{itemize}
\item Expressions: %
\begin{itemize}
\item literals (integers, strings, characters)
\item applications, incl. infix applications and sections
\item lambda abstractions
\item if, let, case
\item pattern guards
\item list comprehensions
\end{itemize}
\end{itemize}

  What we can't:

  \ldots

5 Phases:

\begin{itemize}
\item Parsing
\item Preprocessing
\item Converting
\item Adapting
\item Printing
\end{itemize}

*}

section {* Configuring and adapting *}

subsection {* The concept of adaption *}

subsection {* Setting up your own adaption \label{sec:adaption} *}

text {*
  @{text Haskabelle} provides some default adaptions already
  in directory \shell{bin/default}.  You can setup your
  own adaption according to the following steps:
*}

subsubsection {* Copy \shell{bin/default} *}

text {*
  Typically you will want to use the default adaption as a starting
  point, so copy the \shell{bin/default} directory to a directory
  of your choice (which we will refer to as \shell{<ADAPT>}).
*}

subsubsection {* Adapt the prelude theory *}

text {*
  If desired, adapt the prelude theory \shell{<ADAPT>/Prelude.thy}.
*}

subsubsection {* Edit adaptions *}

text {*
  The adaptions themselves reside in \shell{<ADAPT>/adapt.txt}
  and can be edited there.
*}

subsubsection {* Process adaptions *}

text {*
  To make the adaptions accessible to @{text Haskabelle},
  execute the following:
*}

text %quote {*
  \shell{bin/mk\_adapt <ADAPT>} 
*}

text {*
  \noindent This also includes some basic consistency checking.

  If you have multiple @{text Isabelle} versions on your machine,
  you can select one particular by setting the shell variable
  \shell{ISABELLE_PROCESS}
  (usually \shell{ISABELLE_HOME/bin/isabelle-process})
  to the process wrapper of the desired @{text Isabelle}.
*}

subsubsection {* Use this adaption during conversion *}

text {*
  A particular adaption other than default is selected using the
  \shell{--adapt} command line switch:
*}

text %quote {*
  \shell{bin/haskabelle --adapt <ADAPT> <SRC1> .. <SRCn> <DST>}
*}


section {* Examples \label{sec:examples} *}

text {*
  Examples for Haskabelle can be found in the
  \shell{ex/src\_hs} directory in the distribution.
  They can be converted at a glance using the following command:
*}

text %quote {*
  \shell{bin/regression}
*}

text {*
  Each generated theory then is re-imported into @{text Isabelle}.
  If you have multiple @{text Isabelle} versions on your machine,
  you can select one particular by setting the shell variable
  \shell{ISABELLE_TOOL}
  (usually \shell{ISABELLE_HOME/bin/isabelle})
  to the tool wrapper of the desired @{text Isabelle}.
*}

end
