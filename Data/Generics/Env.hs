{-|
  This module provides traversal schemes for SYB that enable access to
  modular defined environment information.
-}

module Data.Generics.Env
where

import Data.Generics
import Data.Monoid
import Control.Monad
import Control.Monad.Reader

class Component t c where
    extract :: t -> c
    liftC :: (c -> c) -> (t -> t)

instance Component (a, b) a where
    extract (a,b) = a
    liftC f (a,b) = (f a,b)

instance Component (a, b) b where
    extract (a,b) = b
    liftC f (a,b) = (a,f b)

{-|
  Elements of this type define how environments of type @e@ are changed
  during the generic traversal of a data structure.
-}
newtype EnvTrans e = EnvTrans (forall a. Data a => a -> [e -> e])

{-|
  This function turns a simple query function into a function
  that returns a list repeating the original result as often as
  there are immediate subterms in the argument.
-}
uniE :: (Data a) => (a -> b) -> (a -> [b])
uniE query node = (flip replicate (query node) . glength) node

{-|
  This function turns constant environments into environment
  transformations that accumulate the environment values.
-}
accE :: (Monoid e) => (a -> [e]) -> (a -> [e -> e])
accE accum node = map (flip mappend) (accum node)

{-|
  This function turns constant environments into environment
  transformations that replace the current environment with a new
  value (for @Just@) or keep it (for @Nothing@)
-}
replE :: (a -> [Maybe e]) -> (a -> [e -> e])
replE repl node = map replMb (repl node)
    where replMb Nothing    old = old
          replMb (Just new) _   = new


{-|
  This transformer for environments of type @e@ will result in no changes to
  the environment during the generic traversal.
-}

nilE :: EnvTrans e
nilE = EnvTrans (flip replicate id. glength)

{-|
  This function constructs a transformer for environments of type @e@ from
  a function that produces a list of environment transformation function for a specific
  type @a@. The environment transformations from the list are applied to the respective immediate
  subterm of the data type @a@, i.e., the first element is applied to the first component
  of the type etc. For all other types the environment is left unchanged.
-}
mkE :: (Typeable a) => (a -> [e -> e]) ->  EnvTrans e
mkE trans = nilE `extE` trans


{-|
  This function extends the given base transformer for environments of type @e@ by
  a function that produces a list of environment transformation function for a specific
  type @a@. The environment transformations from the list are applied to the respective
  successor of the data type @a@, i.e., the first element is applied to the first component
  of the type etc. For all other types the environment is transformed as by the
  base transformer that was given to this function.
-}

extE :: (Typeable a) => EnvTrans e -> (a -> [e -> e]) ->  EnvTrans e
extE (EnvTrans base) trans = EnvTrans ( base `extQ` trans)

{-|
  This function takes a transformer for environments of type @c@ and
  lifts it to a corresponding transformer for environments of type @e@
  that has @c@ as a component. The resulting transformer only acts on the
  @c@ component of @e@.
-}

liftE :: Component e c => EnvTrans c -> EnvTrans e
liftE (EnvTrans query) = (EnvTrans query')
    where query' node = map liftC (query node)

{-|
  This function extends a transformer for environments of type @e@
  by a transformer for environments of type @c@ which is a component
  of $e$. 
-}

extByC :: Component e c => EnvTrans e -> EnvTrans c -> EnvTrans e
extByC (EnvTrans base) (EnvTrans ext) = (EnvTrans query)
    where query node = zipWith (.) (base node) (map liftC (ext node))


{-|
  This function applies the given monadic transformation function everywhere
  in a bottom-up manner and provides environment information during the traversal
  as generated by the given environment transformer.
-}
everywhereEnv :: MonadReader e m =>
                 EnvTrans e -> GenericM m -> GenericM m
everywhereEnv transArg@(EnvTrans envTrans) f node = 
    let trans = envTrans node
    in gmapEnvT trans (everywhereEnv transArg f) node >>= f

{-|
  This function summarises the queried results collected by
  a traversal and provides environment information during the traversal
  as generated by the given environment transformer.
-}

everythingEnv :: MonadReader e m =>
                 EnvTrans e -> (q -> q -> q) -> GenericQ (m q) -> GenericQ (m q)
everythingEnv transArg@(EnvTrans envTrans) combine f node =
    let trans = envTrans node
    in do children <- gmapEnvQ trans (everythingEnv transArg combine f) node
          current <- f node
          return $ foldl combine current children
        
{-|
  This function checks that the given node has the same number of immediate subterms as
  there are elements in the list. If so the last argument is returned. Otherwise an 
  exception is thrown.  
-}
checkTrans :: Data a => a -> [r -> r] -> b -> b
checkTrans node trans x
    | children > ts = error $ "Too few environment transformers for constructor \""
                               ++ show (toConstr node) ++ "\": Expected "
                                      ++ show children ++ ", but found " ++ show ts
    | children < ts = error $ "Too many environment transformers for constructor \""
                               ++ show (toConstr node) ++ "\": Expected "
                                      ++ show children ++ ", but found " ++ show ts
    | otherwise = x
                   
    where children = glength node
          ts = length trans

{-|
  A type definition needed to define 'gmapEnvT'.
-}
newtype EnvT  m a r = EnvT (m ([a -> a],r))
unEnvT (EnvT x) = x

{-|
  This function applies the given monadic transformer to all immediate 
  subterms. The environments of the resulting monadic computations are
  modified as given by the list of environment transformation functions, where 
  the i-th function in the list is used for the i-th subterm.
-}
gmapEnvT ::MonadReader r m => [r -> r] -> GenericM m -> GenericM m
gmapEnvT trans f node = checkTrans node trans $
                        unEnvT (gfoldl k z node) >>= (return . snd)
    where z x = EnvT $ return (trans,x)
          k (EnvT c) x = EnvT $
                       do (t:ts,c') <- c
                          x' <- local t (f x)
                          return (ts, c' x')

{-|
  This function applies the given monadic query to all immediate 
  subterms. The environments of the resulting monadic computations are
  modified as given by the list of environment transformation functions, where 
  the i-th function in the list is used for the i-th subterm.
-}
gmapEnvQ :: MonadReader r m => [r -> r] -> GenericQ (m q) -> GenericQ (m [q])
gmapEnvQ trans f node = checkTrans node trans $
                        sequence $ zipWith local trans (gmapQ f node)