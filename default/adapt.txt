(*  Author: Tobias C. Rittweiler and Florian Haftmann, TU Muenchen

Default adaption table.
*)

classes
  "Prelude.Eq"          "Prelude.eq"
    parameter "Prelude.(==)"    "a -> a -> bool"
    parameter "Prelude.(/=)"    "a -> a -> bool"
  "Prelude.Ord"         "Prelude.ord"
    parameter "Prelude.(<=)"    "a -> a -> bool"
    parameter "Prelude.(<)"     "a -> a -> bool"
  "Prelude.Show"        "Prelude.print"
    parameter "Prelude.show"    "a -> String"
  "Prelude.Num"         "Prelude.num"

types
  "Prelude.Bool"        "bool"
  "Prelude.UnitTyCon"   "unit"
  "Prelude.PairTyCon"   "*"
  "Prelude.ListTyCon"   "list"
  "Prelude.Maybe"       "option"
  "Prelude.Char"        "char"
  "Prelude.String"      "string"
  "Prelude.Int"         "int"
  "Prelude.Integer"     "int"

consts
  "Prelude.True"        "True"
  "Prelude.False"       "False"
  "Prelude.not"         "Not"
  "Prelude.(&&)"        "op &"
  "Prelude.(||)"        "op |"

  "Prelude._|_"         "HOL.undefined"
  "Prelude.error"       "Prelude.error"

  "Prelude.($)"         "Prelude.rapp"
  "Prelude.curry"       "Prelude.curry"
  "Prelude.uncurry"     "Prelude.uncurry"
  "Prelude.id"          "Fun.id"
  "Prelude.(.)"         "Fun.comp"

  "Prelude.(==)"        "Prelude.equal"
  "Prelude.(/=)"        "Prelude.inequal"

  "Prelude.(())"        "Unity"
  "Prelude.PairDataCon" "Pair"
  "Prelude.fst"         "fst"
  "Prelude.snd"         "snd"

  "Prelude.([])"        "List.Nil"
  "Prelude.(:)"         "List.Cons"
  "Prelude.null"        "List.null"
  "Prelude.head"        "List.hd"
  "Prelude.tail"        "List.tl"
  "Prelude.map"         "List.map"
  "Prelude.filter"      "List.filter"
  "Prelude.(++)"        "List.append"
  "Prelude.concat"      "List.concat"
  "Prelude.reverse"     "List.rev"
  "Prelude.elem"        "List.member"
  "Prelude.replicate"   "Prelude.replicate"
  "Prelude.(!!)"        "Prelude.nth"
  "Prelude.length"      "Prelude.length"
  "Prelude.any"         "List.list_ex"
  "Prelude.all"         "List.list_all"
  "Prelude.zip"         "List.zip"
  "Prelude.foldl"       "List.foldl"

  "Prelude.Nothing"     "Option.None"
  "Prelude.Just"        "Option.Some"

  "Prelude.show"        "Prelude.print"

  "Prelude.(+)"         "Algebras.plus"
  "Prelude.(*)"         "Algebras.times"
  "Prelude.negate"      "Algebras.uminus"
  "Prelude.(-)"         "Algebras.minus"
  "Prelude.(<)"         "Orderings.less"
  "Prelude.(<=)"        "Orderings.less_eq"
  "Prelude.(>)"         "Orderings.greater"
  "Prelude.(>=)"        "Orderings.greater_eq"
  "Prelude.abs"         "Groups.abs"
  "Prelude.sgn"         "Groups.sgn"
  "Prelude.fromInteger" "Int.of_int"
  "Prelude.divMod"      "Divides.divmod_int"
