(*  Title:      Prelude.thy
    Author:     Tobias Rittweiler, Florian Haftmann, TU Muenchen

Base environment for theories generated by the Haskell importer.
*)

theory Prelude
imports Main
begin

class print =
  fixes print :: "'a \<Rightarrow> string"

class heq =
  fixes heq :: "'a \<Rightarrow> 'a \<Rightarrow> bool"
  fixes hneq :: "'a \<Rightarrow> 'a \<Rightarrow> bool"

class num = number_ring + heq + print + abs + sgn

instantiation int :: heq
begin 

definition
  "heq x y = (x = (y::int))"

definition
  "hneq x y = (x \<noteq> (y::int))"

instance ..

end

instance int :: num ..

fun hsk_foldr :: "('b => 'a => 'a) => 'a => 'b list => 'a" where
    "hsk_foldr f a (x # xs) = f x (hsk_foldr f a xs)"
  | "hsk_foldr f a Nil = a"

fun zipWith :: "('a => 'b => 'c) => 'a list => 'b list => 'c list" where
    "zipWith z (a # as) (b # bs) = (z a b # zipWith z as bs)"
  | "zipWith _ _ _ = Nil"

fun list_and :: "(bool list) \<Rightarrow> bool" where
    "list_and Nil = True"
  | "list_and (True # xs) = list_and xs"
  | "list_and (False # _) = False"

definition fun_app :: "('a \<Rightarrow> 'b) \<Rightarrow> 'a \<Rightarrow> 'b" (infixr "$" 60) where
  "f $ x = f x"

end